{"version":3,"sources":["util.js","../node_modules/domready/ready.js","scroll-reveal/index.js","count-up/index.js","index.js"],"names":["mapOptions","el","defaultOptions","dataOptions","Object","keys","reduce","optionName","attr","camelCaseToDash","value","getAttribute","assign","s","replace","toLowerCase","formSettings","options","defaults","elemsToWatch","start","opts","stop","callback","push","isInView","forEach","i","existingEl","splice","scroll","window","scrollY","pageYOffset","boundsTop","getBoundingClientRect","top","viewport","bottom","innerHeight","bounds","clientHeight","raf","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","setTimeout","scrollHandler","handler","addEventListener","lang","duration","delay","settings","test","innerHTML","_countUpOrigInnerHTML","hasLang","divisions","splitValues","splitNumbers","nums","k","length","num","isCountable","format","detectNumFormat","generateNumbersTo","applyNumFormat","style","visibility","output","shift","clearTimeout","countUpTimeout","undefined","scrollReveal","text","split","finalNumber","len","increment","numbers","Array","fill","map","v","strNum","decimalPlaces","hasComma","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","parseInt","countUp"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAMA,kCAAa,SAAbA,UAAa,CAAEC,EAAF,EAAMC,cAAN,EAA0B;AAChD,QAAMC,cAAcC,OAAOC,IAAP,CAAaH,cAAb,EAA8BI,MAA9B,CAAsC,UAAEH,WAAF,EAAeI,UAAf,EAA+B;AACrF,YAAMC,iBAAeC,gBAAiBF,UAAjB,CAArB;AACA,YAAMG,QAAQT,GAAGU,YAAH,CAAiBH,IAAjB,CAAd;AACA,YAAKE,KAAL,EAAa;AACTP,wBAAaI,UAAb,IAA4BG,KAA5B;AACH;AACD,eAAOP,WAAP;AACH,KAPmB,EAOjB,EAPiB,CAApB;AAQA,WAAOC,OAAOQ,MAAP,CAAeV,cAAf,EAA+BC,WAA/B,CAAP;AACH,CAVM;;AAYA,IAAMM,4CAAkB,SAAlBA,eAAkB;AAAA,WAAKI,EAAEC,OAAF,CAAW,sBAAX,EAAmC,KAAnC,EAA2CC,WAA3C,EAAL;AAAA,CAAxB;;AAEA,IAAMC,sCAAe,SAAfA,YAAe,CAAEf,EAAF,EAAMC,cAAN,EAAsBe,OAAtB,EAAmC;AAC3D,WAAOb,OAAOQ,MAAP,CACHZ,WAAYC,EAAZ,EAAgBiB,QAAhB,CADG,EAEHD,OAFG,CAAP;AAIH,CALM;;;ACdP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC9BA;;;;;;AAEO,IAAME,sCAAe,EAArB;;AAEP,IAAMC,QAAQ,SAARA,KAAQ,CAAEnB,EAAF,EAAqB;AAAA,QAAfoB,IAAe,uEAAR,EAAQ;;AAC/BC,SAAMrB,EAAN;AACA,QAAMgB,UAAUb,OAAOQ,MAAP,CACZ,EAAEW,UAAU,oBAAM,CAAE,CAApB,EADY,EAEZF,IAFY,CAAhB;;AAKAF,iBAAaK,IAAb,CAAmB,EAAEvB,MAAF,EAAMgB,gBAAN,EAAnB;AACA,QAAKQ,SAAUxB,EAAV,EAAcgB,OAAd,CAAL,EAA+B;AAC3BA,gBAAQM,QAAR;AACAD,aAAMrB,EAAN;AACH;AACJ,CAZD;;AAcA,IAAMqB,OAAO,SAAPA,IAAO,CAAErB,EAAF,EAAU;AACnBkB,iBAAaO,OAAb,CAAsB,gBAAsBC,CAAtB,EAA6B;AAAA,YAArBC,UAAqB,QAAzB3B,EAAyB;;AAC/C,YAAK2B,eAAe3B,EAApB,EAAyB;AACrBkB,yBAAaU,MAAb,CAAqBF,CAArB,EAAwB,CAAxB;AACH;AACJ,KAJD;AAKH,CAND;;AAQO,IAAMF,8BAAW,SAAXA,QAAW,CAAExB,EAAF,EAAMgB,OAAN,EAAmB;AACvC,QAAMa,SAASC,OAAOC,OAAP,IAAkBD,OAAOE,WAAxC;AACA,QAAMC,YAAYjC,GAAGkC,qBAAH,GAA2BC,GAA3B,GAAiCN,MAAnD;;AAEA,QAAMO,WAAW;AACbD,aAAKN,MADQ;AAEbQ,gBAAQR,SAASC,OAAOQ;AAFX,KAAjB;;AAKA,QAAMC,SAAS;AACXJ,aAAKF,SADM;AAEXI,gBAAQJ,YAAYjC,GAAGwC;AAFZ,KAAf;;AAKA,WAASD,OAAOF,MAAP,IAAiBD,SAASD,GAA1B,IAAiCI,OAAOF,MAAP,IAAiBD,SAASC,MAA7D,IACEE,OAAOJ,GAAP,IAAcC,SAASC,MAAvB,IAAiCE,OAAOJ,GAAP,IAAcC,SAASD,GADjE;AAEH,CAhBM;;AAkBP,IAAMM,MACFX,OAAOY,qBAAP,IACAZ,OAAOa,2BADP,IAEAb,OAAOc,wBAFP,IAGA,UAAUtB,QAAV,EAAqB;AACjBQ,WAAOe,UAAP,CAAmBvB,QAAnB,EAA6B,OAAO,EAApC;AACH,CANL;;AAQO,IAAMwB,wCAAgB,SAAhBA,aAAgB,GAAM;AAC/B5B,iBAAaO,OAAb,CAAsB,iBAAuB;AAAA,YAAnBzB,EAAmB,SAAnBA,EAAmB;AAAA,YAAfgB,OAAe,SAAfA,OAAe;;AACzC,YAAKQ,SAAUxB,EAAV,EAAcgB,OAAd,CAAL,EAA+B;AAC3BA,oBAAQM,QAAR;AACAD,iBAAMrB,EAAN;AACH;AACJ,KALD;AAMH,CAPM;;kBASQ;AACXmB,gBADW;AAEXE;AAFW;;;AAKf,wBAAU,YAAM;AACZ,QAAM0B,UAAU,SAAVA,OAAU;AAAA,eAAMN,IAAKK,aAAL,CAAN;AAAA,KAAhB;AACAC;AACAjB,WAAOkB,gBAAP,CAAyB,QAAzB,EAAmCD,OAAnC;AACAjB,WAAOkB,gBAAP,CAAyB,QAAzB,EAAmCD,OAAnC;AACH,CALD;;;;;;;;;AClEA;;AACA;;;;;;AAEA,IAAM5B,QAAQ,SAARA,KAAQ,CAAEnB,EAAF,EAAwB;AAAA,QAAlBgB,OAAkB,uEAAR,EAAQ;;;AAElC,QAAMC,WAAW;AACbgC,cAAM,EADO;AAEbC,kBAAU,IAFG;AAGbC,eAAO;AAHM,KAAjB;;AAMA,QAAMC,WAAW,wBAAcpD,EAAd,EAAkBiB,QAAlB,EAA4BD,OAA5B,CAAjB;;AAEAK,SAAMrB,EAAN;;AAEA;AACA,QAAK,CAAE,QAAQqD,IAAR,CAAcrD,GAAGsD,SAAjB,CAAP,EAAsC;AAClC;AACH;;AAED;AACAtD,OAAGuD,qBAAH,GAA2BvD,GAAGsD,SAA9B;AACA,QAAME,UAAU,CAAC,CAAExD,GAAGU,YAAH,CAAiB,WAAjB,CAAH,IAAqC,CAAC,CAAEM,QAAQiC,IAAhE;;AAEA;AACA,QAAMQ,YAAYL,SAASF,QAAT,GAAoBE,SAASD,KAA/C;;AAEA;AACA,QAAMO,cAAcC,aAAc3D,GAAGsD,SAAjB,CAApB;;AAEA;AACA,QAAMM,OAAO,EAAb;;AAEA;AACA,SAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAIJ,SAArB,EAAgCI,GAAhC,EAAsC;AAClCD,aAAKrC,IAAL,CAAW,EAAX;AACH;;AAED;AACA,SAAM,IAAIG,IAAI,CAAd,EAAiBA,IAAIgC,YAAYI,MAAjC,EAAyCpC,GAAzC,EAA+C;;AAE3C,YAAIqC,MAAML,YAAahC,CAAb,CAAV;;AAEA,YAAKsC,YAAaD,GAAb,CAAL,EAA0B;AAAA;;AAEtB,oBAAME,SAASC,gBAAiBH,GAAjB,CAAf;AACAA,sBAAMA,IAAIlD,OAAJ,CAAa,IAAb,EAAmB,EAAnB,CAAN;;AAEAsD,kCAAmBJ,GAAnB,EAAwBN,SAAxB,EAAoChC,OAApC,CAA6C,UAAEsC,GAAF,EAAOrC,CAAP,EAAc;AACvDkC,yBAAMlC,CAAN,KAAa0C,eAAgBL,GAAhB,EAAqBE,MAArB,EAA6Bb,SAASH,IAAtC,CAAb;AACH,iBAFD;AALsB;AASzB,SATD,MASO;;AAEH;AACA,iBAAM,IAAIY,KAAI,CAAd,EAAiBA,KAAIJ,SAArB,EAAgCI,IAAhC,EAAsC;AAClCD,qBAAMC,EAAN,KAAaE,GAAb;AACH;AACJ;AACJ;;AAED/D,OAAGsD,SAAH,GAAeM,KAAK,CAAL,CAAf;AACA5D,OAAGqE,KAAH,CAASC,UAAT,GAAsB,SAAtB;;AAEA,QAAMhD,WAAW,SAAXA,QAAW,GAAM;;AAEnB;AACA,YAAMiD,SAAS,SAATA,MAAS,GAAW;AACtBvE,eAAGsD,SAAH,GAAeM,KAAKY,KAAL,EAAf;AACA,gBAAKZ,KAAKE,MAAV,EAAmB;AACfW,6BAAczE,GAAG0E,cAAjB;AACA1E,mBAAG0E,cAAH,GAAoB7B,WAAY0B,MAAZ,EAAoBnB,SAASD,KAA7B,CAApB;AACH,aAHD,MAGO;AACHnD,mBAAGuD,qBAAH,GAA2BoB,SAA3B;AACH;AACJ,SARD;AASA3E,WAAG0E,cAAH,GAAoB7B,WAAY0B,MAAZ,EAAoBnB,SAASD,KAA7B,CAApB;AACH,KAbD;;AAeAyB,2BAAazD,KAAb,CAAoBnB,EAApB,EAAwB;AACpBsB;AADoB,KAAxB;AAGH,CA/ED;;AAiFA,IAAMD,OAAO,SAAPA,IAAO,CAAErB,EAAF,EAAU;AACnByE,iBAAczE,GAAG0E,cAAjB;AACH,QAAK1E,GAAGuD,qBAAR,EAAgC;AAC/BvD,WAAGsD,SAAH,GAAetD,GAAGuD,qBAAlB;AACAvD,WAAGuD,qBAAH,GAA2BoB,SAA3B;AACA;AACD3E,OAAGqE,KAAH,CAASC,UAAT,GAAsB,EAAtB;AACA,CAPD;;kBASe;AACXnD,gBADW;AAEXE;;AAGJ;AALe;AAMR,IAAMsC,sCAAe,SAAfA,YAAe,CAAEkB,IAAF;AAAA,WAAYA,KAAKC,KAAL,CAAW,gCAAX,CAAZ;AAAA,CAArB;;AAEP;AACO,IAAMd,oCAAc,SAAdA,WAAc,CAAED,GAAF;AAAA,WAAW,0BAAyBV,IAAzB,CAA+BU,GAA/B,KAAwC,CAAE,UAAUV,IAAV,CAAgBU,GAAhB;AAArD;AAAA,CAApB;;AAEP;AACO,IAAMI,gDAAoB,SAApBA,iBAAoB,CAAEY,WAAF,EAAeC,GAAf,EAAwB;AACrD,QAAKA,MAAM,CAAX,EAAe;AACX,eAAO,CAAED,WAAF,CAAP;AACH;AACD,QAAME,YAAYF,cAAcC,GAAhC;AACA,QAAME,UAAUC,MAAOH,MAAM,CAAb,EAAiBI,IAAjB,CAAuB,CAAvB,EAA2BC,GAA3B,CAAgC,UAAEC,CAAF,EAAK5D,CAAL;AAAA,eAAY,CAAEA,IAAI,CAAN,IAAYuD,SAAxB;AAAA,KAAhC,CAAhB;AACAC,YAAQ3D,IAAR,CAAcwD,WAAd,EANqD,CAMzB;AAC5B,WAAOG,OAAP;AACH,CARM;;AAUA,IAAMhB,4CAAkB,SAAlBA,eAAkB,CAAEqB,MAAF,EAAc;;AAEzC,QAAIC,gBAAgB,CAApB;AACA,QAAK,mBAAmBnC,IAAnB,CAAyBkC,MAAzB,CAAL,EAAyC;AACrCC,wBAAgB,CAAED,OAAOT,KAAP,CAAc,GAAd,EAAoB,CAApB,KAA0B,EAA5B,EAAiChB,MAAjD;AACH;;AAED,WAAO;AACH2B,kBAAU,gBAAgBpC,IAAhB,CAAsBkC,MAAtB,CADP;AAEHC;AAFG,KAAP;AAIH,CAXM;;AAaA,IAAMpB,0CAAiB,SAAjBA,cAAiB,CAAEL,GAAF,EAAOE,MAAP,EAA8B;AAAA,QAAfhB,IAAe,uEAAR,EAAQ;AAAA,QAEhDwC,QAFgD,GAEpBxB,MAFoB,CAEhDwB,QAFgD;AAAA,QAEtCD,aAFsC,GAEpBvB,MAFoB,CAEtCuB,aAFsC;;;AAIxD,QAAKA,iBAAiBvC,IAAjB,IAAyBwC,QAA9B,EAAyC;AACrC,eAAOC,KAAKC,YAAL,CAAmB1C,OAAOA,IAAP,GAAc0B,SAAjC,EAA4C;AAC/CiB,mCAAuBJ,aADwB;AAE/CK,mCAAuBL;AAFwB,SAA5C,EAGHvB,MAHG,CAGKF,GAHL,CAAP;AAIH;;AAED,WAAO+B,SAAU/B,GAAV,EAAe,EAAf,CAAP;AACH,CAZM;;;;;;;;;AChIP;;;;AAGA;;;;;;QAFSgC,UAAAA;QAGAnB,eAAAA","file":"effectbox.map","sourceRoot":"../src","sourcesContent":["export const mapOptions = ( el, defaultOptions ) => {\n    const dataOptions = Object.keys( defaultOptions ).reduce( ( dataOptions, optionName ) => {\n        const attr = `data-${camelCaseToDash( optionName )}`\n        const value = el.getAttribute( attr )\n        if ( value ) {\n            dataOptions[ optionName ] = value\n        }\n        return dataOptions\n    }, {} )\n    return Object.assign( defaultOptions, dataOptions )\n}\n\nexport const camelCaseToDash = s => s.replace( /([a-zA-Z])(?=[A-Z])/g, '$1-' ).toLowerCase()\n\nexport const formSettings = ( el, defaultOptions, options ) => {\n    return Object.assign( \n        mapOptions( el, defaults ), \n        options \n    )\n}","/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n","import domready from 'domready'\n\nexport const elemsToWatch = []\n\nconst start = ( el, opts = {} ) => {\n    stop( el )\n    const options = Object.assign( \n        { callback: () => {} },\n        opts\n    )\n\n    elemsToWatch.push( { el, options, } )\n    if ( isInView( el, options ) ) {\n        options.callback()\n        stop( el )\n    }\n}\n\nconst stop = ( el ) => {\n    elemsToWatch.forEach( ( { el: existingEl }, i ) => {\n        if ( existingEl === el ) {\n            elemsToWatch.splice( i, 1 )\n        }\n    } )\n}\n\nexport const isInView = ( el, options ) => {\n    const scroll = window.scrollY || window.pageYOffset\n    const boundsTop = el.getBoundingClientRect().top + scroll\n    \n    const viewport = {\n        top: scroll,\n        bottom: scroll + window.innerHeight,\n    }\n    \n    const bounds = {\n        top: boundsTop,\n        bottom: boundsTop + el.clientHeight,\n    }\n    \n    return ( bounds.bottom >= viewport.top && bounds.bottom <= viewport.bottom ) \n        || ( bounds.top <= viewport.bottom && bounds.top >= viewport.top );\n}\n\nconst raf = \n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    function( callback ) {\n        window.setTimeout( callback, 1000 / 60 )\n    }\n\nexport const scrollHandler = () => {\n    elemsToWatch.forEach( ( { el, options } ) => {\n        if ( isInView( el, options ) ) {\n            options.callback()\n            stop( el )\n        }\n    } )\n}\n\nexport default {\n    start,\n    stop,\n} \n\ndomready( () => {\n    const handler = () => raf( scrollHandler )\n    handler()\n    window.addEventListener( 'scroll', handler )\n    window.addEventListener( 'resize', handler )\n} )","import { formSettings } from '../util'\nimport scrollReveal from '../scroll-reveal'\n\nconst start = ( el, options = {} ) => {\n\n    const defaults = {\n        lang: '',\n        duration: 1000,\n        delay: 16,\n    }\n\n    const settings = formSettings( el, defaults, options )\n    \n    stop( el );\n\n    // If no number, don't do anything.\n    if ( ! /[0-9]/.test( el.innerHTML ) ) {\n        return;\n    }\n\n    // Remember the element.\n    el._countUpOrigInnerHTML = el.innerHTML;\n    const hasLang = !! el.getAttribute( 'data-lang' ) || !! options.lang;\n\n    // Number of times the number will change.\n    const divisions = settings.duration / settings.delay;\n\n    // Split numbers and html tags.\n    const splitValues = splitNumbers( el.innerHTML );\n\n    // Contains all numbers to be displayed.\n    const nums = [];\n\n    // Set blank strings to ready the split values.\n    for ( let k = 0; k < divisions; k++ ) {\n        nums.push( '' );\n    }\n\n    // Loop through all numbers and html tags.\n    for ( let i = 0; i < splitValues.length; i++ ) {\n\n        let num = splitValues[ i ];\n\n        if ( isCountable( num ) ) {\n\n            const format = detectNumFormat( num )\n            num = num.replace( /,/g, '' );\n\n            generateNumbersTo( num, divisions ).forEach( ( num, i ) => {\n                nums[ i ] += applyNumFormat( num, format, settings.lang )\n            } )\n\n        } else {\n\n            // Insert all non-numbers in the same place.\n            for ( let k = 0; k < divisions; k++ ) {\n                nums[ k ] += num;\n            }\n        }\n    }\n\n    el.innerHTML = nums[0];\n    el.style.visibility = 'visible';\n\n    const callback = () => {\n\n        // Function for displaying output with the set time and delay.\n        const output = function() {\n            el.innerHTML = nums.shift();\n            if ( nums.length ) {\n                clearTimeout( el.countUpTimeout );\n                el.countUpTimeout = setTimeout( output, settings.delay );\n            } else {\n                el._countUpOrigInnerHTML = undefined;\n            }\n        };\n        el.countUpTimeout = setTimeout( output, settings.delay );\n    }\n\n    scrollReveal.start( el, {\n        callback\n    } )\n}\n\nconst stop = ( el ) => {\n    clearTimeout( el.countUpTimeout );\n\tif ( el._countUpOrigInnerHTML ) {\n\t\tel.innerHTML = el._countUpOrigInnerHTML;\n\t\tel._countUpOrigInnerHTML = undefined;\n\t}\n\tel.style.visibility = '';\n}\n\nexport default {\n    start,\n    stop,\n} \n\n// Given a string that can have HTML, split it to separate the numbers.\nexport const splitNumbers = ( text ) => text.split(/(<[^>]+>|[0-9.][,.0-9]*[0-9]*)/)\n\n// Countable string\nexport const isCountable = ( num ) => /([0-9.][,.0-9]*[0-9]*)/.test( num ) && ! /<[^>]+>/.test( num )\n\n// Creates an array of numbers from zero to num\nexport const generateNumbersTo = ( finalNumber, len ) => {\n    if ( len < 1 ) {\n        return [ finalNumber ]\n    }\n    const increment = finalNumber / len;\n    const numbers = Array( len - 1 ).fill( 0 ).map( ( v, i ) => ( i + 1 ) * increment )\n    numbers.push( finalNumber ) // Ensure that the last number is the original one.\n    return numbers\n}\n\nexport const detectNumFormat = ( strNum ) => {\n\n    let decimalPlaces = 0\n    if ( /^[0-9]+\\.[0-9]+$/.test( strNum ) ) {\n        decimalPlaces = ( strNum.split( '.' )[1] || [] ).length\n    }\n            \n    return {\n        hasComma: /[0-9]+,[0-9]+/.test( strNum ),\n        decimalPlaces,\n    }\n}\n\nexport const applyNumFormat = ( num, format, lang = '' ) => {\n\n    const { hasComma, decimalPlaces } = format\n\n    if ( decimalPlaces || lang || hasComma ) {\n        return Intl.NumberFormat( lang ? lang : undefined, { \n            minimumFractionDigits: decimalPlaces,\n            maximumFractionDigits: decimalPlaces,\n        } ).format( num );\n    }\n\n    return parseInt( num, 10 )\n}","import countUp from './count-up'\nexport { countUp }\n\nimport scrollReveal from './scroll-reveal'\nexport { scrollReveal }\n"]}